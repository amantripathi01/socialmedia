// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require("axios");
const { registerUser } = require('./User');
jest.mock('axios');

describe('registerUser', () => {
  beforeEach(() => {
    axios.post.mockClear();
  });

  it('should dispatch RegisterRequest and RegisterSuccess when API call is successful', async () => {
    const mockDispatch = jest.fn();
    const mockUser = { id: 1, name: 'John Doe', email: 'john@example.com' };
    axios.post.mockResolvedValue({ data: { user: mockUser } });

    await registerUser('John Doe', 'john@example.com', 'password', 'avatar')(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith({ type: "RegisterRequest" });
    expect(axios.post).toHaveBeenCalledWith('/api/v1/register', { name: 'John Doe', email: 'john@example.com', password: 'password', avatar: 'avatar' }, { headers: { "Content-Type": "application/json" } });
    expect(mockDispatch).toHaveBeenCalledWith({ type: "RegisterSuccess", payload: mockUser });
  });

  it('should dispatch RegisterRequest and RegisterFailure when API call fails', async () => {
    const mockDispatch = jest.fn();
    const mockError = new Error('Request failed');
    axios.post.mockRejectedValue({ response: { data: { message: mockError.message } } });

    await registerUser('John Doe', 'john@example.com', 'password', 'avatar')(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith({ type: "RegisterRequest" });
    expect(axios.post).toHaveBeenCalledWith('/api/v1/register', { name: 'John Doe', email: 'john@example.com', password: 'password', avatar: 'avatar' }, { headers: { "Content-Type": "application/json" } });
    expect(mockDispatch).toHaveBeenCalledWith({ type: "RegisterFailure", payload: mockError.message });
  });
});
