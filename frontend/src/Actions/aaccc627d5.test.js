// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { registerUser } = require('./User');

jest.mock('axios');

describe('registerUser', () => {
  beforeEach(() => {
    axios.post.mockClear();
  });

  test('should dispatch RegisterRequest action before making the request', () => {
    const dispatch = jest.fn();
    const userData = { name: 'John', email: 'john@example.com', password: 'password', avatar: 'avatar.png' };

    registerUser(...Object.values(userData))(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterRequest' });
  });

  test('should make a POST request to /api/v1/register', () => {
    const dispatch = jest.fn();
    const userData = { name: 'John', email: 'john@example.com', password: 'password', avatar: 'avatar.png' };

    registerUser(...Object.values(userData))(dispatch);

    expect(axios.post).toHaveBeenCalledWith('/api/v1/register', userData, { headers: { 'Content-Type': 'application/json' } });
  });

  test('should dispatch RegisterSuccess action when request succeeds', async () => {
    const dispatch = jest.fn();
    const userData = { name: 'John', email: 'john@example.com', password: 'password', avatar: 'avatar.png' };
    const userResponse = { user: { id: 1, ...userData } };
    axios.post.mockResolvedValueOnce({ data: userResponse });

    await registerUser(...Object.values(userData))(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterSuccess', payload: userResponse.user });
  });

  test('should dispatch RegisterFailure action when request fails', async () => {
    const dispatch = jest.fn();
    const userData = { name: 'John', email: 'john@example.com', password: 'password', avatar: 'avatar.png' };
    const errorResponse = { data: { message: 'An error occurred' } };
    axios.post.mockRejectedValueOnce({ response: errorResponse });

    await registerUser(...Object.values(userData))(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterFailure', payload: errorResponse.data.message });
  });
});
