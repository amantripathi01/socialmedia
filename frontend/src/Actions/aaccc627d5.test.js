// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { registerUser } = require('./User.js');
const { createStore, applyMiddleware } = require('redux');
const thunk = require('redux-thunk');

jest.mock('axios');

describe('User registration', () => {
  let store;
  let dispatch;

  beforeEach(() => {
    store = createStore(() => ({}), applyMiddleware(thunk));
    dispatch = jest.fn();
  });

  test('should dispatch RegisterRequest and RegisterSuccess on successful registration', async () => {
    const mockData = { user: { name: 'John', email: 'john@example.com' } };
    axios.post.mockResolvedValue({ data: mockData });

    await registerUser('John', 'john@example.com', 'password', 'avatar')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterRequest' });
    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterSuccess', payload: mockData.user });
  });

  test('should dispatch RegisterRequest and RegisterFailure on failed registration', async () => {
    const mockError = { response: { data: { message: 'Failed to register' } } };
    axios.post.mockRejectedValue(mockError);

    await registerUser('John', 'john@example.com', 'password', 'avatar')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterRequest' });
    expect(dispatch).toHaveBeenCalledWith({ type: 'RegisterFailure', payload: mockError.response.data.message });
  });
});
