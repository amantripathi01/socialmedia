// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { getFollowingPosts } = require('./User');

jest.mock('axios');

describe('getFollowingPosts', () => {
  beforeEach(() => {
    axios.get.mockClear();
  });

  it('should dispatch postOfFollowingRequest and postOfFollowingSuccess when request is successful', async () => {
    const dispatch = jest.fn();
    const posts = [{ id: 1, title: 'Post 1' }, { id: 2, title: 'Post 2' }];
    axios.get.mockResolvedValueOnce({ data: { posts } });

    await getFollowingPosts()(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'postOfFollowingRequest' });
    expect(axios.get).toHaveBeenCalledWith('/api/v1/posts');
    expect(dispatch).toHaveBeenCalledWith({ type: 'postOfFollowingSuccess', payload: posts });
  });

  it('should dispatch postOfFollowingRequest and postOfFollowingFailure when request fails', async () => {
    const dispatch = jest.fn();
    const error = new Error('Request failed');
    axios.get.mockRejectedValueOnce({ response: { data: { message: error.message } } });

    await getFollowingPosts()(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'postOfFollowingRequest' });
    expect(axios.get).toHaveBeenCalledWith('/api/v1/posts');
    expect(dispatch).toHaveBeenCalledWith({ type: 'postOfFollowingFailure', payload: error.message });
  });
});
