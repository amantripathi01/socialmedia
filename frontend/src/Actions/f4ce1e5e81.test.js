// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { addCommentOnPost } = require('./Post');

jest.mock('axios');

describe('addCommentOnPost', () => {
  const id = '1';
  const comment = 'This is a comment';
  const dispatch = jest.fn();

  beforeEach(() => {
    dispatch.mockClear();
  });

  it('dispatches "addCommentRequest" and "addCommentSuccess" if the request is successful', async () => {
    const response = { data: { message: 'Comment added successfully' } };
    axios.put.mockResolvedValue(response);

    await addCommentOnPost(id, comment)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'addCommentRequest' });
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { comment }, { headers: { 'Content-Type': 'application/json' } });
    expect(dispatch).toHaveBeenCalledWith({ type: 'addCommentSuccess', payload: response.data.message });
  });

  it('dispatches "addCommentRequest" and "addCommentFailure" if the request fails', async () => {
    const error = { response: { data: { message: 'Failed to add comment' } } };
    axios.put.mockRejectedValue(error);

    await addCommentOnPost(id, comment)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'addCommentRequest' });
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { comment }, { headers: { 'Content-Type': 'application/json' } });
    expect(dispatch).toHaveBeenCalledWith({ type: 'addCommentFailure', payload: error.response.data.message });
  });
});
