// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

const axios = require("axios");
const { addCommentOnPost } = require("./Post");

jest.mock('axios');

describe("addCommentOnPost", () => {
  let id, comment, dispatch;

  beforeEach(() => {
    id = "123";
    comment = "Nice post!";
    dispatch = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("dispatches addCommentRequest and addCommentSuccess when the request is successful", async () => {
    const message = "Comment added successfully";
    axios.put.mockResolvedValueOnce({ data: { message } });

    await addCommentOnPost(id, comment)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "addCommentRequest" });
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { comment }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: "addCommentSuccess", payload: message });
  });

  it("dispatches addCommentRequest and addCommentFailure when the request fails", async () => {
    const message = "Failed to add comment";
    axios.put.mockRejectedValueOnce({ response: { data: { message } } });

    await addCommentOnPost(id, comment)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "addCommentRequest" });
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { comment }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: "addCommentFailure", payload: message });
  });
});
