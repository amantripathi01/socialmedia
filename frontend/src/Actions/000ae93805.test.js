// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { updatePassword } = require('./User');

jest.mock('axios');

describe("updatePassword", () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  test("should dispatch updatePasswordSuccess when API call is successful", async () => {
    const dispatch = jest.fn();
    const oldPassword = "oldPassword123";
    const newPassword = "newPassword123";
    const data = { message: 'Password updated successfully' };

    axios.put.mockResolvedValue({ data });

    await updatePassword(oldPassword, newPassword)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "updatePasswordRequest" });
    expect(axios.put).toHaveBeenCalledWith("/api/v1/update/password", { oldPassword, newPassword }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: "updatePasswordSuccess", payload: data.message });
  });

  test("should dispatch updatePasswordFailure when API call fails", async () => {
    const dispatch = jest.fn();
    const oldPassword = "oldPassword123";
    const newPassword = "newPassword123";
    const error = { response: { data: { message: 'Old password is incorrect' } } };

    axios.put.mockRejectedValue(error);

    await updatePassword(oldPassword, newPassword)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "updatePasswordRequest" });
    expect(axios.put).toHaveBeenCalledWith("/api/v1/update/password", { oldPassword, newPassword }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: "updatePasswordFailure", payload: error.response.data.message });
  });
});
