// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { updatePassword } = require('./User.js');

jest.mock('axios');

describe('updatePassword', () => {
  beforeEach(() => {
    axios.put.mockClear();
  });

  it('should dispatch updatePasswordRequest action at the start', async () => {
    const dispatch = jest.fn();
    axios.put.mockResolvedValue({ data: {} });

    await updatePassword('oldPass', 'newPass')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'updatePasswordRequest' });
  });

  it('should dispatch updatePasswordSuccess action on successful password update', async () => {
    const dispatch = jest.fn();
    const message = 'Password updated successfully';
    axios.put.mockResolvedValue({ data: { message } });

    await updatePassword('oldPass', 'newPass')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'updatePasswordSuccess', payload: message });
  });

  it('should dispatch updatePasswordFailure action on failed password update', async () => {
    const dispatch = jest.fn();
    const message = 'Failed to update password';
    axios.put.mockRejectedValue({ response: { data: { message } } });

    await updatePassword('oldPass', 'newPass')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'updatePasswordFailure', payload: message });
  });

  it('should call axios.put with correct parameters', async () => {
    const dispatch = jest.fn();
    axios.put.mockResolvedValue({ data: {} });

    await updatePassword('oldPass', 'newPass')(dispatch);

    expect(axios.put).toHaveBeenCalledWith('/api/v1/update/password', { oldPassword: 'oldPass', newPassword: 'newPass' }, { headers: { 'Content-Type': 'application/json' } });
  });
});
