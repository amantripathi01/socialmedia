// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require("axios");
const { followAndUnfollowUser } = require('./User');
const { useDispatch } = require('react-redux');

jest.mock('axios');
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

describe('followAndUnfollowUser', () => {
  const dispatch = jest.fn();
  beforeEach(() => {
    useDispatch.mockReturnValue(dispatch);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should dispatch followUserRequest and followUserSuccess on successful request', async () => {
    const id = '123';
    const mockData = { data: { message: 'Followed successfully' } };
    axios.get.mockResolvedValue(mockData);

    await followAndUnfollowUser(id)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'followUserRequest' });
    expect(axios.get).toHaveBeenCalledWith(`/api/v1/follow/${id}`);
    expect(dispatch).toHaveBeenCalledWith({ type: 'followUserSuccess', payload: mockData.data.message });
  });

  test('should dispatch followUserRequest and followUserFailure on failed request', async () => {
    const id = '123';
    const mockError = { response: { data: { message: 'Error following user' } } };
    axios.get.mockRejectedValue(mockError);

    await followAndUnfollowUser(id)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'followUserRequest' });
    expect(axios.get).toHaveBeenCalledWith(`/api/v1/follow/${id}`);
    expect(dispatch).toHaveBeenCalledWith({ type: 'followUserFailure', payload: mockError.response.data.message });
  });
});
