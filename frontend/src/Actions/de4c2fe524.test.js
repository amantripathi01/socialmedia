// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const { createNewPost } = require('./Post');
const axios = require('axios');

jest.mock('axios');

describe('createNewPost', () => {
  beforeEach(() => {
    axios.post.mockClear();
  });

  test('should dispatch newPostRequest action', async () => {
    const dispatch = jest.fn();
    await createNewPost('caption', 'image')(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostRequest' });
  });

  test('should make a post request to /api/v1/post/upload', async () => {
    const dispatch = jest.fn();
    await createNewPost('caption', 'image')(dispatch);
    expect(axios.post).toHaveBeenCalledWith('/api/v1/post/upload', { caption: 'caption', image: 'image' }, { headers: { "Content-Type": "application/json" } });
  });

  test('should dispatch newPostSuccess action on success', async () => {
    const dispatch = jest.fn();
    axios.post.mockResolvedValue({ data: { message: 'success' } });
    await createNewPost('caption', 'image')(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostSuccess', payload: 'success' });
  });

  test('should dispatch newPostFailure action on failure', async () => {
    const dispatch = jest.fn();
    axios.post.mockRejectedValue({ response: { data: { message: 'error' } } });
    await createNewPost('caption', 'image')(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostFailure', payload: 'error' });
  });
});
