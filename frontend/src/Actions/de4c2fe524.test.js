// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { createNewPost } = require('./Post');

jest.mock('axios');

describe('createNewPost', () => {
  let caption;
  let image;
  let dispatch;

  beforeEach(() => {
    caption = 'Test Caption';
    image = 'testImage.png';
    dispatch = jest.fn();
  });

  it('should dispatch newPostRequest action before making the post request', async () => {
    axios.post.mockResolvedValue({});
    await createNewPost(caption, image)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostRequest' });
  });

  it('should make a post request to /api/v1/post/upload', async () => {
    axios.post.mockResolvedValue({});
    await createNewPost(caption, image)(dispatch);
    expect(axios.post).toHaveBeenCalledWith('/api/v1/post/upload', { caption, image }, { headers: { "Content-Type": "application/json" } });
  });

  it('should dispatch newPostSuccess action with message payload when post request is successful', async () => {
    const message = 'New post created';
    axios.post.mockResolvedValue({ data: { message } });
    await createNewPost(caption, image)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostSuccess', payload: message });
  });

  it('should dispatch newPostFailure action with error message payload when post request fails', async () => {
    const errorMessage = 'Error creating post';
    axios.post.mockRejectedValue({ response: { data: { message: errorMessage } } });
    await createNewPost(caption, image)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostFailure', payload: errorMessage });
  });
});
