// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const {createNewPost} = require('./Post');
const {mockDispatch} = require('./mockDispatch');

jest.mock('axios');

describe('createNewPost method', () => {

  beforeEach(() => {
    axios.post.mockClear();
  });

  test('should dispatch newPostRequest action', async () => {
    axios.post.mockResolvedValue({});

    await createNewPost('Test Caption', 'Test Image')(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith({type: 'newPostRequest'});
  });

  test('should call axios.post with correct parameters', async () => {
    axios.post.mockResolvedValue({});

    await createNewPost('Test Caption', 'Test Image')(mockDispatch);

    expect(axios.post).toHaveBeenCalledWith(`/api/v1/post/upload`, {
      caption: 'Test Caption',
      image: 'Test Image'
    }, {
      headers: {
        "Content-Type": "application/json"
      }
    });
  });

  test('should dispatch newPostSuccess action on successful post', async () => {
    axios.post.mockResolvedValue({
      data: {
        message: 'Test Message'
      }
    });

    await createNewPost('Test Caption', 'Test Image')(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith({
      type: 'newPostSuccess',
      payload: 'Test Message'
    });
  });

  test('should dispatch newPostFailure action on failed post', async () => {
    axios.post.mockRejectedValue({
      response: {
        data: {
          message: 'Test Error'
        }
      }
    });

    await createNewPost('Test Caption', 'Test Image')(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith({
      type: 'newPostFailure',
      payload: 'Test Error'
    });
  });

});
