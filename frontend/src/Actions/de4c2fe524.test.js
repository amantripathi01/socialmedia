// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { createNewPost } = require('./Post');

jest.mock('axios');

describe('createNewPost', () => {
  beforeEach(() => {
    axios.post.mockClear();
  });

  test('it dispatches newPostRequest and newPostSuccess on successful post creation', async () => {
    const dispatch = jest.fn();
    const mockData = { message: 'Post created successfully' };

    axios.post.mockResolvedValueOnce({ data: mockData });

    await createNewPost('caption', 'image')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostRequest' });
    expect(axios.post).toHaveBeenCalledWith('/api/v1/post/upload', { caption: 'caption', image: 'image' }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostSuccess', payload: mockData.message });
  });

  test('it dispatches newPostRequest and newPostFailure on post creation failure', async () => {
    const dispatch = jest.fn();
    const mockError = { response: { data: { message: 'Error creating post' } } };

    axios.post.mockRejectedValueOnce(mockError);

    await createNewPost('caption', 'image')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostRequest' });
    expect(axios.post).toHaveBeenCalledWith('/api/v1/post/upload', { caption: 'caption', image: 'image' }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: 'newPostFailure', payload: mockError.response.data.message });
  });
});
