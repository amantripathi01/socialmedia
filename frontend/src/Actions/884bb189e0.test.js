// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { resetPassword } = require('./User');

jest.mock('axios');

describe('resetPassword', () => {
  const token = 'testToken';
  const password = 'testPassword';
  const dispatch = jest.fn();
  const response = { data: { message: 'Success' } };

  beforeEach(() => {
    dispatch.mockClear();
  });

  it('should dispatch resetPasswordRequest action', async () => {
    axios.put.mockResolvedValue(response);
    await resetPassword(token, password)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordRequest' });
  });

  it('should call axios with correct parameters', async () => {
    axios.put.mockResolvedValue(response);
    await resetPassword(token, password)(dispatch);
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/password/reset/${token}`, { password }, { headers: { "Content-Type": "application/json" } });
  });

  it('should dispatch resetPasswordSuccess action on successful response', async () => {
    axios.put.mockResolvedValue(response);
    await resetPassword(token, password)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordSuccess', payload: response.data.message });
  });

  it('should dispatch resetPasswordFailure action on error response', async () => {
    const error = { response: { data: { message: 'Failure' } } };
    axios.put.mockRejectedValue(error);
    await resetPassword(token, password)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordFailure', payload: error.response.data.message });
  });
});
