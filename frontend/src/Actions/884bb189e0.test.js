// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { resetPassword } = require('./User');

jest.mock('axios');

describe('resetPassword', () => {
  beforeEach(() => {
    axios.put.mockClear();
  });

  test('should dispatch resetPasswordRequest and resetPasswordSuccess on successful password reset', async () => {
    const dispatch = jest.fn();
    const token = 'test-token';
    const password = 'new-password';
    const response = { data: { message: 'Password reset successful' } };

    axios.put.mockResolvedValueOnce(response);

    await resetPassword(token, password)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordRequest' });
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/password/reset/${token}`, { password }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordSuccess', payload: response.data.message });
  });

  test('should dispatch resetPasswordRequest and resetPasswordFailure on failed password reset', async () => {
    const dispatch = jest.fn();
    const token = 'test-token';
    const password = 'new-password';
    const error = { response: { data: { message: 'Invalid token' } } };

    axios.put.mockRejectedValueOnce(error);

    await resetPassword(token, password)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordRequest' });
    expect(axios.put).toHaveBeenCalledWith(`/api/v1/password/reset/${token}`, { password }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: 'resetPasswordFailure', payload: error.response.data.message });
  });
});
