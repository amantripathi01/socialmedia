// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const axios = require("axios");
const { resetPassword } = require("./User");
const { createStore } = require('redux');

jest.mock("axios");

describe("resetPassword action", () => {
  let store;

  beforeEach(() => {
    store = createStore(jest.fn());
  });

  afterEach(() => {
    axios.put.mockReset();
  });

  test("should dispatch resetPasswordRequest action before making the axios call", async () => {
    const dispatch = jest.fn();
    const token = "testToken";
    const password = "testPassword";

    axios.put.mockResolvedValue({});

    await resetPassword(token, password)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "resetPasswordRequest" });
  });

  test("should dispatch resetPasswordSuccess action when axios call is successful", async () => {
    const dispatch = jest.fn();
    const token = "testToken";
    const password = "testPassword";
    const message = "Password reset successful";

    axios.put.mockResolvedValue({
      data: {
        message
      }
    });

    await resetPassword(token, password)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({
      type: "resetPasswordSuccess",
      payload: message
    });
  });

  test("should dispatch resetPasswordFailure action when axios call fails", async () => {
    const dispatch = jest.fn();
    const token = "testToken";
    const password = "testPassword";
    const errorMessage = "Invalid token";

    axios.put.mockRejectedValue({
      response: {
        data: {
          message: errorMessage
        }
      }
    });

    await resetPassword(token, password)(dispatch);

    expect(dispatch).toHaveBeenCalledWith({
      type: "resetPasswordFailure",
      payload: errorMessage
    });
  });
});
