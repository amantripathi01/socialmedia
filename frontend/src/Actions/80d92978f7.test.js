// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { getAllUsers } = require('./User');
const { createStore, applyMiddleware } = require('redux');
const thunk = require('redux-thunk');

jest.mock('axios');

const store = createStore(() => ({}), applyMiddleware(thunk));

describe('getAllUsers', () => {
  beforeEach(() => {
    store.clearActions();
  });

  it('dispatches allUsersRequest and allUsersSuccess on successful API request', async () => {
    const users = [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];

    axios.get.mockResolvedValueOnce({ data: { users } });

    await store.dispatch(getAllUsers());

    const actions = store.getActions();

    expect(actions[0]).toEqual({ type: 'allUsersRequest' });
    expect(actions[1]).toEqual({ type: 'allUsersSuccess', payload: users });
  });

  it('dispatches allUsersRequest and allUsersFailure on failed API request', async () => {
    const errorMessage = 'Request failed with status code 500';

    axios.get.mockRejectedValueOnce({ response: { data: { message: errorMessage } } });

    await store.dispatch(getAllUsers());

    const actions = store.getActions();

    expect(actions[0]).toEqual({ type: 'allUsersRequest' });
    expect(actions[1]).toEqual({ type: 'allUsersFailure', payload: errorMessage });
  });
});
