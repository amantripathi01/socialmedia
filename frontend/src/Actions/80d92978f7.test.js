// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { getAllUsers } = require('./User');

jest.mock('axios');

describe('getAllUsers', () => {
  beforeEach(() => {
    axios.get.mockClear();
  });

  test('should dispatch allUsersRequest action', async () => {
    const dispatch = jest.fn();
    await getAllUsers()(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'allUsersRequest' });
  });

  test('should call axios with correct parameters', async () => {
    const dispatch = jest.fn();
    await getAllUsers('John')(dispatch);

    expect(axios.get).toHaveBeenCalledWith('/api/v1/users?name=John');
  });

  test('should dispatch allUsersSuccess action on successful response', async () => {
    const dispatch = jest.fn();
    const users = [{ id: 1, name: 'John' }];
    axios.get.mockResolvedValue({ data: { users } });

    await getAllUsers('John')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'allUsersSuccess', payload: users });
  });

  test('should dispatch allUsersFailure action on error response', async () => {
    const dispatch = jest.fn();
    const errorMessage = 'Error message';
    axios.get.mockRejectedValue({ response: { data: { message: errorMessage } } });

    await getAllUsers('John')(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: 'allUsersFailure', payload: errorMessage });
  });
});
