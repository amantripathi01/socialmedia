// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require("axios");
const { deleteCommentOnPost } = require('./Post');
jest.mock('axios');

describe('deleteCommentOnPost', () => {
  let id, commentId, dispatch, mockAxios;

  beforeEach(() => {
    id = '123';
    commentId = '456';
    dispatch = jest.fn();
    mockAxios = axios.delete.mockResolvedValue({ data: { message: 'Comment deleted' } });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('dispatches deleteCommentRequest action', async () => {
    await deleteCommentOnPost(id, commentId)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'deleteCommentRequest' });
  });

  test('makes a delete request to /api/v1/post/comment/:id with commentId', async () => {
    await deleteCommentOnPost(id, commentId)(dispatch);
    expect(mockAxios).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { data: { commentId } });
  });

  test('dispatches deleteCommentSuccess action with message on success', async () => {
    await deleteCommentOnPost(id, commentId)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'deleteCommentSuccess', payload: 'Comment deleted' });
  });

  test('dispatches deleteCommentFailure action with message on failure', async () => {
    const error = new Error('Failed to delete comment');
    axios.delete.mockRejectedValue({ response: { data: { message: error.message } } });
    
    await deleteCommentOnPost(id, commentId)(dispatch);
    expect(dispatch).toHaveBeenCalledWith({ type: 'deleteCommentFailure', payload: error.message });
  });
});
