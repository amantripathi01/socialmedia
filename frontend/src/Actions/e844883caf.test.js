// Test generated by RoostGPT for test SocialMediaTest using AI Type Open AI and AI Model gpt-4

const axios = require("axios");
const { deleteCommentOnPost } = require('./Post');
const { act } = require('react-dom/test-utils');

jest.mock('axios');

describe('deleteCommentOnPost', () => {
  let dispatch;

  beforeEach(() => {
    dispatch = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should dispatch deleteCommentRequest and deleteCommentSuccess when comment deletion is successful', async () => {
    const id = '1';
    const commentId = '2';
    const message = 'Comment deleted successfully';

    axios.delete.mockResolvedValueOnce({
      data: {
        message
      }
    });

    await act(async () => deleteCommentOnPost(id, commentId)(dispatch));

    expect(dispatch).toHaveBeenCalledWith({
      type: 'deleteCommentRequest'
    });

    expect(dispatch).toHaveBeenCalledWith({
      type: 'deleteCommentSuccess',
      payload: message
    });

    expect(axios.delete).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, {
      data: {
        commentId
      }
    });
  });

  it('should dispatch deleteCommentRequest and deleteCommentFailure when comment deletion fails', async () => {
    const id = '1';
    const commentId = '2';
    const errorMessage = 'Failed to delete comment';

    axios.delete.mockRejectedValueOnce({
      response: {
        data: {
          message: errorMessage
        }
      }
    });

    await act(async () => deleteCommentOnPost(id, commentId)(dispatch));

    expect(dispatch).toHaveBeenCalledWith({
      type: 'deleteCommentRequest'
    });

    expect(dispatch).toHaveBeenCalledWith({
      type: 'deleteCommentFailure',
      payload: errorMessage
    });

    expect(axios.delete).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, {
      data: {
        commentId
      }
    });
  });
});
