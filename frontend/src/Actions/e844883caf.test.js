// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { deleteCommentOnPost } = require('./Post');

jest.mock('axios');

describe('deleteCommentOnPost', () => {
  let id, commentId, dispatch;

  beforeEach(() => {
    id = '123';
    commentId = '456';
    dispatch = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('dispatches deleteCommentSuccess when axios delete request is successful', async () => {
    const message = 'Comment deleted successfully';
    axios.delete.mockResolvedValueOnce({ data: { message } });

    await deleteCommentOnPost(id, commentId)(dispatch);

    expect(dispatch).toHaveBeenNthCalledWith(1, { type: 'deleteCommentRequest' });
    expect(axios.delete).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { data: { commentId } });
    expect(dispatch).toHaveBeenNthCalledWith(2, { type: 'deleteCommentSuccess', payload: message });
  });

  it('dispatches deleteCommentFailure when axios delete request fails', async () => {
    const message = 'Failed to delete comment';
    axios.delete.mockRejectedValueOnce({ response: { data: { message } } });

    await deleteCommentOnPost(id, commentId)(dispatch);

    expect(dispatch).toHaveBeenNthCalledWith(1, { type: 'deleteCommentRequest' });
    expect(axios.delete).toHaveBeenCalledWith(`/api/v1/post/comment/${id}`, { data: { commentId } });
    expect(dispatch).toHaveBeenNthCalledWith(2, { type: 'deleteCommentFailure', payload: message });
  });
});
