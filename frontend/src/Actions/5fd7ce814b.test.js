// Test generated by RoostGPT for test TestA using AI Type Open AI and AI Model gpt-4

const { getUserPosts } = require('./User');
const axios = require('axios');

jest.mock('axios');

describe('getUserPosts', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('dispatches success action when axios request succeeds', async () => {
    const dispatch = jest.fn();
    const id = 1;
    const posts = [{ id: 1, title: 'Post 1' }, { id: 2, title: 'Post 2' }];

    axios.get.mockResolvedValueOnce({ data: { posts } });

    await getUserPosts(id)(dispatch);

    expect(dispatch).toHaveBeenNthCalledWith(1, { type: 'userPostsRequest' });
    expect(dispatch).toHaveBeenNthCalledWith(2, { type: 'userPostsSuccess', payload: posts });
    expect(axios.get).toHaveBeenCalledWith(`/api/v1/userposts/${id}`);
  });

  test('dispatches failure action when axios request fails', async () => {
    const dispatch = jest.fn();
    const id = 1;
    const error = new Error('Request failed');

    axios.get.mockRejectedValueOnce({ response: { data: { message: error.message } } });

    await getUserPosts(id)(dispatch);

    expect(dispatch).toHaveBeenNthCalledWith(1, { type: 'userPostsRequest' });
    expect(dispatch).toHaveBeenNthCalledWith(2, { type: 'userPostsFailure', payload: error.message });
    expect(axios.get).toHaveBeenCalledWith(`/api/v1/userposts/${id}`);
  });
});
