// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

const axios = require('axios');
const { loginUser } = require('./User');

jest.mock('axios');

describe("User login tests", () => {

  beforeEach(() => {
    axios.post.mockClear();
  });

  test("Successful login", async () => {
    const dispatch = jest.fn();
    const response = {
      data: {
        user: {
          id: 1,
          email: "test@example.com"
        }
      }
    };

    axios.post.mockResolvedValueOnce(response);

    await loginUser("test@example.com", "password")(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "LoginRequest" });
    expect(axios.post).toHaveBeenCalledWith("/api/v1/login", { email: "test@example.com", password: "password" }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: "LoginSuccess", payload: response.data.user });
  });

  test("Failed login", async () => {
    const dispatch = jest.fn();
    const error = {
      response: {
        data: {
          message: "Login failed"
        }
      }
    };

    axios.post.mockRejectedValueOnce(error);

    await loginUser("test@example.com", "password")(dispatch);

    expect(dispatch).toHaveBeenCalledWith({ type: "LoginRequest" });
    expect(axios.post).toHaveBeenCalledWith("/api/v1/login", { email: "test@example.com", password: "password" }, { headers: { "Content-Type": "application/json" } });
    expect(dispatch).toHaveBeenCalledWith({ type: "LoginFailure", payload: error.response.data.message });
  });
});
