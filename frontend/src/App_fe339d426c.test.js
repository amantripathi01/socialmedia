// Test generated by RoostGPT for test ExpressJs using AI Type Open AI and AI Model gpt-4

import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import { createStore } from 'redux';
import { rootReducer } from './Reducers';
import App from './App';

const renderWithRedux = (
  component,
  { initialState, store = createStore(rootReducer, initialState) } = {}
) => {
  return {
    ...render(<Provider store={store}>{component}</Provider>),
    store,
  }
}

describe('App', () => {
  test('renders Login component when user is not authenticated', () => {
    renderWithRedux(<BrowserRouter><App /></BrowserRouter>, { initialState: { user: { isAuthenticated: false } } });
    expect(screen.getByText(/login/i)).toBeInTheDocument();
  });

  test('renders Home component when user is authenticated', () => {
    renderWithRedux(<BrowserRouter><App /></BrowserRouter>, { initialState: { user: { isAuthenticated: true } } });
    expect(screen.getByText(/home/i)).toBeInTheDocument();
  });
  
  test('renders Account component when user is authenticated and path is /account', () => {
    window.history.pushState({}, '', '/account');
    renderWithRedux(<BrowserRouter><App /></BrowserRouter>, { initialState: { user: { isAuthenticated: true } } });
    expect(screen.getByText(/account/i)).toBeInTheDocument();
  });

  test('renders NotFound component when path is not matched', () => {
    window.history.pushState({}, '', '/non-existing-path');
    renderWithRedux(<BrowserRouter><App /></BrowserRouter>);
    expect(screen.getByText(/not found/i)).toBeInTheDocument();
  });
});
